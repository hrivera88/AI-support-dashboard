service: ai-support-dashboard-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    OPENAI_MODEL: ${env:OPENAI_MODEL, 'gpt-4-turbo-preview'}
    OPENAI_MAX_TOKENS: ${env:OPENAI_MAX_TOKENS, '150'}
    OPENAI_TEMPERATURE: ${env:OPENAI_TEMPERATURE, '0.7'}
    JWT_SECRET: ${env:JWT_SECRET}
    CORS_ORIGIN: ${env:CORS_ORIGIN}
    REDIS_URL: ${env:REDIS_URL}
    PINECONE_API_KEY: ${env:PINECONE_API_KEY}
    PINECONE_ENVIRONMENT: ${env:PINECONE_ENVIRONMENT}
    PINECONE_INDEX_NAME: ${env:PINECONE_INDEX_NAME}
    RATE_LIMIT_WINDOW_MS: ${env:RATE_LIMIT_WINDOW_MS, '900000'}
    RATE_LIMIT_MAX_REQUESTS: ${env:RATE_LIMIT_MAX_REQUESTS, '100'}
    AI_RATE_LIMIT_WINDOW_MS: ${env:AI_RATE_LIMIT_WINDOW_MS, '60000'}
    AI_RATE_LIMIT_MAX_REQUESTS: ${env:AI_RATE_LIMIT_MAX_REQUESTS, '20'}
    SENTRY_DSN: ${env:SENTRY_DSN}
    LOG_LEVEL: ${env:LOG_LEVEL, 'info'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'

plugins:
  - serverless-offline
  - serverless-webpack

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: npm
  serverless-offline:
    httpPort: 3001
    port: 3001

functions:
  api:
    handler: dist/lambda.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: ${env:CORS_ORIGIN, '*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
      - http:
          path: /
          method: ANY
          cors:
            origin: ${env:CORS_ORIGIN, '*'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

resources:
  Resources:
    # CloudWatch Log Group
    ApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-api
        RetentionInDays: 14